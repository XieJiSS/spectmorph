#!/usr/bin/python

# Copyright (C) 2011 Stefan Westerfeld
#
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os

class Config:
  dir_count         = 0
  auto_tune_count   = 0
  auto_loop_count   = 0
  auto_volume_count = 0
  set_markers_count = 0
  sample_count      = 0
  samples           = []

def die (message):
  print >> sys.stderr, "sminstbuilder: " + message
  exit (1)

def parse_config (filename):
  config = Config()
  try:
    f = open (filename)
  except:
    die ("file '%s' missing" % filename)
  line_number = 1
  for line in f:
    tokens = line.split()
    parse_ok = False
    if len (tokens) == 0: # blank line: ok
      parse_ok = True
    if len (tokens) == 1:
      if tokens[0] == 'auto-tune':
        config.auto_tune = True
        config.auto_tune_count += 1
        parse_ok = True
    if len (tokens) == 2:
      if tokens[0] == 'dir':
        config.dir = tokens[1]
        config.dir_count += 1
        parse_ok = True
      elif tokens[0] == 'auto-loop':
        config.auto_loop = tokens[1]
        config.auto_loop_count += 1
        parse_ok = True
      elif tokens[0] == 'auto-volume':
        config.auto_volume = tokens[1]
        config.auto_volume_count += 1
        parse_ok = True
      elif tokens[0] == 'set-markers':
        config.set_markers = tokens[1]
        config.set_markers_count += 1
        parse_ok = True
    if len (tokens) == 3:
      if tokens[0] == 'sample':
        config.samples += [ tokens[1:] ]
        config.sample_count += 1
        parse_ok = True
    if not parse_ok:
      die ("parse error in line %d '%s'" % (line_number, line.strip()));
    line_number += 1
  if config.dir_count != 1:
    die ("dir command must occur exactly once in config")
  if config.auto_tune_count > 1:
    die ("auto-tune command must occur at most once in config")
  return config

def system_or_die (command):
  print "+++ %s" % command
  os.system (command)

def build_instrument (inst_dir):
  old_path = os.getcwd()
  try:
    os.chdir (inst_dir)
  except:
    die ("directory '%s' not found" % inst_dir)

  config = parse_config ("config")
  system_or_die ("rm -rf %s" % config.dir)
  system_or_die ("mkdir -p %s" % config.dir)
  system_or_die ("smwavset init %s/instrument.wset" % config.dir);
  system_or_die ("smwavset init %s/instrument-clipped.wset" % config.dir);

  for sample in config.samples:
    system_or_die ("smwavset add %s/instrument.wset %s %s" % (config.dir, sample[0], sample[1]));
    system_or_die ("smwavset add %s/instrument-clipped.wset %s clipped-note-%s.wav" % (config.dir, sample[0], sample[0]));
  # missing: samples command with loop
  system_or_die ("smsampleedit clip %s/instrument.wset clip_markers clipped-note-%%d.wav" % config.dir);
  os.chdir (old_path)

def main():
  print "SpectMorph Instrument Builder, Version @VERSION@"

  for inst_dir in sys.argv[1:]:
    build_instrument (inst_dir)

main()
